import json
import os
import requests

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CallbackContext

import jsonschema
from jsonschema import validate

# API_BASE_URL = "https://my-json-server.typicode.com/devmanorg/congrats-mentor"
API_BASE_URL = "http://127.0.0.1:8080"


# –°–∞–º–æ–ø–∏—Å–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ServerError
class ServerError(Exception):
    """–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö API"""
    pass


mentors_schema = {
    "type": "object",
    "properties": {
        "mentors": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "id": {"type": "integer"},
                    "name": {
                        "type": "object",
                        "properties": {
                            "first": {"type": "string"},
                            "second": {"type": "string"}
                        },
                        "required": ["first", "second"]
                    },
                    "tg_username": {"type": "string"},
                    "tg_chat_id": {"type": "integer"},
                    "bday": {"type": "string", "format": "date"}
                },
                "required": ["id", "name", "tg_username", "tg_chat_id"]
            }
        }
    },
    "required": ["mentors"]
}

postcards_schema = {
    "type": "object",
    "properties": {
        "postcards": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "id": {"type": "integer"},
                    "holidayId": {"type": "string"},
                    "name_ru": {"type": "string"},
                    "body": {"type": "string"}
                },
                "required": ["id", "holidayId", "name_ru", "body"]
            }
        }
    },
    "required": ["postcards"]
}


def check_role(update: Update, context: CallbackContext):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.message.from_user
    selected_role = update.message.text
    mentors = context.bot_data.get("mentors", [])

    if selected_role == "–Ø –ú–µ–Ω—Ç–æ—Ä":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –º–µ–Ω—Ç–æ—Ä–æ–≤
        for mentor in mentors:
            if mentor.get("tg_username") == f"@{user.username}":
                context.user_data["role"] = "mentor"
                update.message.reply_text("–í—ã –º–µ–Ω—Ç–æ—Ä. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!", 
                                          reply_markup=ReplyKeyboardRemove())
                return

        # –ï—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –º–µ–Ω—Ç–æ—Ä–æ–≤
        update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω—Ç–æ—Ä.", reply_markup=ReplyKeyboardRemove())
        return

    elif selected_role == "–Ø –£—á–µ–Ω–∏–∫":
        context.user_data["role"] = "student"
        show_mentors(update, context)


def validate_json(response_json, schema):
    try:
        validate(instance=response_json, schema=schema)
        print("JSON —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ API")
    except jsonschema.exceptions.ValidationError as e:
        raise ServerError("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞") from e


def fetch_and_validate(endpoint, schema, update: Update = None, context: CallbackContext = None):
    url = f"{API_BASE_URL}/{endpoint}"
    
    try:
        response = requests.get(url, timeout=5)

        if response.status_code != 200:
            raise ServerError(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        response_json = response.json()
        validate_json(response_json, schema)
        
        return response_json

    except ServerError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        if update and context:
            handle_server_error(update, context)
        return None
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        if update and context:
            handle_server_error(update, context)
        return None
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
        if update and context:
            handle_server_error(update, context)
        return None


def handle_server_error(update: Update, context: CallbackContext):
    update.message.reply_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def fetch_data(endpoint):
    url = f"{API_BASE_URL}/{endpoint}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if endpoint == "postcards":
            return data.get("postcards", [])
        if endpoint == "mentors":
            return data.get("mentors", [])
    return []


def load_json(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


def get_mentor_full_name(mentor):
    return f'{mentor["name"]["first"]} {mentor["name"]["second"]}'


def get_unique_mentor_display(mentors):
    name_counts = {}
    for mentor in mentors:
        full_name = get_mentor_full_name(mentor)
        name_counts[full_name] = name_counts.get(full_name, 0) + 1

    keyboard = []
    for mentor in mentors:
        full_name = get_mentor_full_name(mentor)
        name_part = shorten_name(full_name)
        if name_counts[full_name] == 1:
            display_name = name_part
        else:
            display_name = f"{name_part} ({mentor['tg_username']})"
        keyboard.append([display_name])

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


def shorten_name(name):
    words = name.split()
    return words[1] + " " + words[-1] + "..." if len(words) > 2 else name


def get_cards_keyboard(cards):
    keyboard = [[card["name_ru"]] for card in cards]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


def start(update: Update, context: CallbackContext):
    keyboard = [["–Ø –ú–µ–Ω—Ç–æ—Ä"], ["–Ø –£—á–µ–Ω–∏–∫"]]
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )


def show_mentors(update: Update, context: CallbackContext):
    mentors = fetch_data("mentors") # ["mentors"]

    if not isinstance(mentors, list) or not all(isinstance(m, dict) for m in mentors) or isinstance(mentors, list) and not mentors[0]:
        update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not mentors:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        context.bot_data["mentors"] = mentors
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –º–µ–Ω—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_unique_mentor_display(mentors)
        )


def process_user_message(update: Update, context: CallbackContext):    
    # –ï—Å–ª–∏ —Ä–æ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º check_role
    if "role" not in context.user_data:
        check_role(update, context)
        return

    # –ï—Å–ª–∏ —Ä–æ–ª—å ‚Äî "mentor", –∑–Ω–∞—á–∏—Ç, –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–±–∏—Ä–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫–∏
    if context.user_data.get("role") == "mentor":
        update.message.reply_text("–í—ã –º–µ–Ω—Ç–æ—Ä –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏, –∞ –Ω–µ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∏—Ö.")
        return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –≤—ã–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º select_card
    if context.user_data.get("state") == "choosing_card":
        select_card(update, context)
    else:
        select_mentor(update, context)


def select_mentor(update: Update, context: CallbackContext):
    mentors = context.bot_data.get("mentors", [])
    selected_text = update.message.text

    selected_mentor = None
    name_counts = {}
    for mentor in mentors:
        full_name = get_mentor_full_name(mentor)
        name_counts[full_name] = name_counts.get(full_name, 0) + 1

    for mentor in mentors:
        full_name = get_mentor_full_name(mentor)
        name_part = shorten_name(full_name)
        if name_counts[full_name] == 1:
            display_name = name_part
        else:
            display_name = f"{name_part} ({mentor['tg_username']})"

        if selected_text == display_name:
            selected_mentor = mentor
            break

    if selected_mentor:
        context.user_data["selected_mentor"] = get_mentor_full_name(selected_mentor)
        cards = fetch_data("postcards")
        context.bot_data["cards"] = cards

        update.message.reply_text(
            f"–¢—ã –≤—ã–±—Ä–∞–ª {get_mentor_full_name(selected_mentor)}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∫—É:",
            reply_markup=get_cards_keyboard(cards)
        )

        # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—Ç–æ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ "–≤—ã–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏"
        context.user_data["state"] = "choosing_card"

    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –º–µ–Ω—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")


def select_card(update: Update, context: CallbackContext):
    
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ "–≤—ã–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏", –∑–Ω–∞—á–∏—Ç, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ select_mentor
    if context.user_data.get("state") != "choosing_card":
        select_mentor(update, context)
        return

    cards = context.bot_data.get("cards", [])
    selected_mentor = context.user_data.get("selected_mentor")
    selected_text = update.message.text

    selected_card = next((c for c in cards if c["name_ru"] == selected_text), None)

    if selected_card:
        body = selected_card["body"].replace("#name", selected_mentor)
        update.message.reply_text(
            f"–¢—ã –≤—ã–±—Ä–∞–ª –æ—Ç–∫—Ä—ã—Ç–∫—É '{selected_card['name_ru']}' –¥–ª—è {selected_mentor}!\n\n{body}",
            reply_markup=ReplyKeyboardRemove()
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –≤—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω
        context.user_data.pop("selected_mentor", None)
        context.user_data.pop("state", None)
    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")


