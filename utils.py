import logging

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import CallbackContext
from api_client import (
    fetch_mentors,
    APIConnectionError,
    APIHTTPError,
    APIParsingError,
    APIValidationError,
    APIClientError
)


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def handle_server_error(update: Update, context: CallbackContext):
    """–°–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    update.message.reply_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def handle_role_selection(update: Update, context: CallbackContext):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏ '–Ø –ú–µ–Ω—Ç–æ—Ä' –∏–ª–∏ '–Ø –£—á–µ–Ω–∏–∫'."""
    user = update.message.from_user
    selected_role = update.message.text

    try:
        mentors = context.bot_data.get("mentors", [])
        
        if selected_role == "–Ø –ú–µ–Ω—Ç–æ—Ä":
            for mentor in mentors:
                if mentor.get("tg_username") == f"@{user.username}":
                    context.user_data["role"] = "mentor"
                    update.message.reply_text("–í—ã –º–µ–Ω—Ç–æ—Ä. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!", 
                                              reply_markup=ReplyKeyboardRemove())
                    return

            update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω—Ç–æ—Ä.",
                                      reply_markup=ReplyKeyboardRemove())
            return

        elif selected_role == "–Ø –£—á–µ–Ω–∏–∫":
            context.user_data["role"] = "student"
            show_mentors(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏: {e}")
        handle_server_error(update, context)


def start(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏."""
    context.user_data.pop("role", None)
    keyboard = [["–Ø –ú–µ–Ω—Ç–æ—Ä"], ["–Ø –£—á–µ–Ω–∏–∫"]]
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard,
                                         resize_keyboard=True,
                                         one_time_keyboard=True)
    )


def show_mentors(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤."""
    try:
        mentors = fetch_mentors()
        context.bot_data["mentors"] = mentors

        if not mentors:
            update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            update.message.reply_text("–í—ã–±–µ—Ä–∏ –º–µ–Ω—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                                      reply_markup=get_unique_mentor_display(mentors))
    
    except APIValidationError:
        handle_server_error(update, context)
    except (APIConnectionError, APIHTTPError, APIParsingError, APIClientError):
        handle_server_error(update, context)


def get_unique_mentor_display(mentors):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–º–µ–Ω–∞–º–∏ –º–µ–Ω—Ç–æ—Ä–æ–≤."""
    name_counts = {}
    for mentor in mentors:
        full_name = get_mentor_full_name(mentor)
        name_counts[full_name] = name_counts.get(full_name, 0) + 1

    keyboard = []
    for mentor in mentors:
        full_name = get_mentor_full_name(mentor)
        name_part = shorten_name(full_name)
        display_name = name_part if name_counts[full_name] == 1 else f"{name_part} ({mentor['tg_username']})"
        keyboard.append([display_name])

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True,
                               one_time_keyboard=True)


def get_mentor_full_name(mentor):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è –º–µ–Ω—Ç–æ—Ä–∞."""
    return f'{mentor["name"]["first"]} {mentor["name"]["second"]}'


def shorten_name(name):
    """–°–æ–∫—Ä–∞—â–∞–µ—Ç –∏–º—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    words = name.split()
    if len(words) > 2:
        return f"{words[1]} {words[-1]}..."
    return name


def process_user_message(update: Update, context: CallbackContext):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        if "role" not in context.user_data:
            handle_role_selection(update, context)
            return

        if context.user_data.get("role") == "mentor":
            update.message.reply_text("–í—ã –º–µ–Ω—Ç–æ—Ä –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏, –∞ –Ω–µ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∏—Ö.")
            return

        if context.user_data.get("state") == "choosing_card":
            select_card(update, context)
        else:
            select_mentor(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        handle_server_error(update, context)


def get_cards_keyboard(cards):
    keyboard = []
    for card in cards:
        display = f"{card['name_ru']} #{card['id']}"
        keyboard.append([display])
    return ReplyKeyboardMarkup(keyboard,
                               resize_keyboard=True,
                               one_time_keyboard=True)


def select_mentor(update: Update, context: CallbackContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç —É—á–µ–Ω–∏–∫—É –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–∞."""
    mentors = context.bot_data.get("mentors", [])
    selected_text = update.message.text

    selected_mentor = None
    name_counts = {}
    for mentor in mentors:
        full_name = get_mentor_full_name(mentor)
        name_counts[full_name] = name_counts.get(full_name, 0) + 1

    for mentor in mentors:
        full_name = get_mentor_full_name(mentor)
        name_part = shorten_name(full_name)
        if name_counts[full_name] == 1:
            display_name = name_part
        else:
            display_name = f"{name_part} ({mentor['tg_username']})"

        if selected_text == display_name:
            selected_mentor = mentor
            break

    if selected_mentor:
        context.user_data["selected_mentor"] = get_mentor_full_name(selected_mentor)
        update.message.reply_text(f"–¢—ã –≤—ã–±—Ä–∞–ª {get_mentor_full_name(selected_mentor)}.")
        context.user_data["state"] = "choosing_card"
        select_card(update, context)
    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –º–µ–Ω—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")


def confirm_card_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π."""
    query = update.callback_query
    query.answer()

    selected_mentor = context.user_data.get("selected_mentor")
    selected_card = context.user_data.get("selected_card")

    if selected_card and selected_mentor:
        body = selected_card["body"].replace("#name", selected_mentor)
        query.message.reply_text(
            f"–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–∫—Ä—ã—Ç–∫—É '{selected_card['name_ru']}' –¥–ª—è {selected_mentor}!\n\n{body}",
            reply_markup=ReplyKeyboardRemove()
        )

        context.user_data.pop("selected_mentor", None)
        context.user_data.pop("selected_card", None)
        context.user_data.pop("state", None)
    else:
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def cancel_card_selection(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∫—Ä—ã—Ç–æ–∫."""
    query = update.callback_query
    query.answer()

    query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É:",
                             reply_markup=get_cards_keyboard(
                                 context.bot_data.get("cards", [])
                                 ))


def select_card(update: Update, context: CallbackContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É, –Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç."""
    try:
        if context.user_data.get("state") != "choosing_card":
            select_mentor(update, context)
            return

        cards = context.bot_data.get("cards", [])

        if not cards:
            update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ–∫ –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                      reply_markup=ReplyKeyboardRemove())
            context.user_data.pop("selected_mentor", None)
            context.user_data.pop("state", None)
            return

        selected_mentor = context.user_data.get("selected_mentor")
        selected_text = update.message.text.strip()

        selected_id = int(selected_text.split("#")[-1]) if "#" in selected_text else None

        selected_card = next((card for card in cards if card["id"] == selected_id), None)

        if selected_card:
            body = selected_card["body"].replace("#name", selected_mentor)
            context.user_data["selected_card"] = selected_card

            keyboard = [
                [InlineKeyboardButton(" –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_card")],
                [InlineKeyboardButton(" –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é", callback_data="cancel_card")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            update.message.reply_text(
                f"–¢—ã –≤—ã–±—Ä–∞–ª –æ—Ç–∫—Ä—ã—Ç–∫—É '{selected_card['name_ru']}'. –í–æ—Ç –µ—ë —Ç–µ–∫—Å—Ç:\n\n{body}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë?",
                reply_markup=reply_markup
            )
        else:
            update.message.reply_text("–í—ã–±–µ—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
                                      reply_markup=get_cards_keyboard(cards))

    except APIValidationError:
        handle_server_error(update, context)
    except (APIConnectionError, APIHTTPError, APIParsingError, APIClientError):
        handle_server_error(update, context)
