import jj
import asyncio
import json
from jj.mock import mocked


async def run_mock_server():
    matcher_mentors = jj.match("GET", "/mentors")
    response_mentors = jj.Response(
        status=200,
        body=json.dumps({  
            "mentors": [
                {"id": 1, "name": {"first": "–ï–≤–≥–µ–Ω–∏–π", "second": "Devman"}, "tg_username": "@eugene_dev", "tg_chat_id": 41878799, "bday": "1991-02-23"},
                {"id": 2, "name": {"first": "–ò–ª—å–º–∏—Ä", "second": "Devman"}, "tg_username": "@ilmir_dev", "tg_chat_id": 6467718221},
                {"id": 3, "name": {"first": "–ù—É—Ä–±–µ–∫", "second": "Devman"}, "tg_username": "@nurbek_dev", "tg_chat_id": 335075762, "bday": "1991-02-23"},
                {"id": 4, "name": {"first": "–ö–∞—Ç—è", "second": "–ò–≤–∞–Ω–æ–≤–∞"}, "tg_username": "@katie", "tg_chat_id": 335000000},
                {"id": 5, "name": {"first": "–ò–≤–∞–Ω", "second": "–ü–µ—Ç—Ä—è–∫–æ–≤"}, "tg_username": "@i_petr", "tg_chat_id": 335000001, "bday": "1991-02-23"},
                {"id": 6, "name": {"first": "–ê–º–∏—Ä", "second": "–ê–º–∏—Ä–æ–≤"}, "tg_username": "@aarr", "tg_chat_id": 335000002, "bday": "1995-09-01"}
            ]
        }, ensure_ascii=False)
    )

    matcher_postcards = jj.match("GET", "/postcards")
    response_postcards = jj.Response(
        status=200,
        json={
            "postcards": [
                {"id": 1, "holidayId": "01.01", "name_ru": "–ù–æ–≤—ã–π –≥–æ–¥", "body": "üéâ‚ú®–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç –≤–∞–º —Å—á–∞—Å—Ç—å–µ, –∑–¥–æ—Ä–æ–≤—å–µ –∏ —É—Å–ø–µ—Ö!"},
                {"id": 2, "holidayId": "birthday", "name_ru": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "body": "üéÇüéâ #name, –° –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ –ª—é–±–æ–≤—å—é!"}
            ]
        }
    )

    # –°–æ–∑–¥–∞–µ–º persistent mocks
    mock_mentors = await mocked(matcher_mentors, response_mentors)
    mock_postcards = await mocked(matcher_postcards, response_postcards)

    print("‚úÖ Mock —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
    
    try:
        while True:
            await asyncio.sleep(1)  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ä–∞–±–æ—Ç–µ
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def fetch_mock_history():
    matcher_mentors = jj.match("GET", "/mentors")
    response_mentors = jj.Response(status=200, json={})

    mock = await mocked(matcher_mentors, response_mentors)
    history = await mock.fetch_history()

    # –í—ã–≤–æ–¥–∏–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    print("\nüìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /mentors:")
    print(json.dumps(history, ensure_ascii=False, indent=2))

if __name__ == "__main__":
    try:
        asyncio.run(run_mock_server())  # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    except KeyboardInterrupt:
        pass
