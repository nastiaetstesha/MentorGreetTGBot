import jj
import asyncio
import json

from jj.mock import mocked


async def run_mock_server():
    matcher_mentors = jj.match("GET", "/mentors")
    response_mentors = jj.Response(
        status=200,
        body=json.dumps({
            "mentors": [
                {}
            ]
        }, ensure_ascii=False)
    )

    matcher_postcards = jj.match("GET", "/postcards")
    response_postcards = jj.Response(
        status=200,
        body=json.dumps({
            "postcards": [
                {"id": 1, "holidayId": "01.01", "name_ru": "FFFF–ù–æ–≤—ã–π –≥–æ–¥", "body": "üéâ‚ú®–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å—ë—Ç –≤–∞–º —Å—á–∞—Å—Ç—å–µ, –∑–¥–æ—Ä–æ–≤—å–µ –∏ —É—Å–ø–µ—Ö!"},
                {"id": 2, "holidayId": "01.01", "name_ru": "U–ù–æ–≤—ã–π –≥–æ–¥", "body": "üöÄ–ù–æ–≤—ã–π –≥–æ–¥ ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã! –ü—É—Å—Ç—å –æ–Ω–∞ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–∞ —Å—á–∞—Å—Ç—å–µ–º!"},
                {"id": 3, "holidayId": "01.01", "name_ru": "N–ù–æ–≤—ã–π –≥–æ–¥", "body": "–° –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ü—É—Å—Ç—å –≤—Å—ë –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ —Å–±—É–¥–µ—Ç—Å—è! üéâ"},
                {"id": 4, "holidayId": "01.01", "name_ru": "J–ù–æ–≤—ã–π –≥–æ–¥", "body": "–ü—É—Å—Ç—å –ù–æ–≤—ã–π –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å–µ—Ç —É–¥–∞—á—É –∏ —Ä–∞–¥–æ—Å—Ç—å! üéá"},
                {"id": 5, "holidayId": "01.01", "name_ru": "A–ù–æ–≤—ã–π –≥–æ–¥", "body": "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —á—É–¥–µ—Å–∞ —É–∂–µ –Ω–∞—á–∞–ª–∏—Å—å! üåü"},
                {"id": 6, "holidayId": "birthday", "name_ru": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "body": "üéÇüéâ #name, –° –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –≥–æ–¥ –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —Ä–∞–¥–æ—Å—Ç—å—é –∏ –ª—é–±–æ–≤—å—é!"},
                {"id": 7, "holidayId": "birthday", "name_ru": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "body": "üéÅüéà #name, –° –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –≤—Å–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è!"},
                {"id": 8, "holidayId": "birthday", "name_ru": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "body": "–° –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–∞—Ä–∏—Ç —Ä–∞–¥–æ—Å—Ç—å! üéÇ"},
                {"id": 9, "holidayId": "birthday", "name_ru": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "body": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ü—É—Å—Ç—å –º–µ—á—Ç—ã —Å–±—ã–≤–∞—é—Ç—Å—è! üåà"},
                {"id": 10, "holidayId": "birthday", "name_ru": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "body": "–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –í—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ! üéÅ"}
            ]
        }, ensure_ascii=False)
    )

    # –°–æ–∑–¥–∞–µ–º persistent mocks
    mock_mentors = await mocked(matcher_mentors, response_mentors)
    mock_postcards = await mocked(matcher_postcards, response_postcards)

    print("Mock —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
    
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print("\n –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def fetch_mock_history():
    matcher_mentors = jj.match("GET", "/mentors")
    response_mentors = jj.Response(status=200, json={})

    mock = await mocked(matcher_mentors, response_mentors)
    history = await mock.fetch_history()
    print("\nüìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /mentors:", history)

if __name__ == "__main__":
    try:
        asyncio.run(run_mock_server())
    except KeyboardInterrupt:
        pass
